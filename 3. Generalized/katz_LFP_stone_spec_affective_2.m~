function [aff_cond1, aff_cond2, power_spec] = katz_LFP_stone_spec_affective_2(dirname)

%This function takes in one input DIRNAME and flips through each *.mat file
%(which is one animal, one day of recording, and one taste) within the
%given directory to perform Welch's power spectral density estimate for
%each taste period in reference to stimulus onset (Pre [-750ms,-250ms],
%Early [250ms,750ms], and Late [1250ms,1750ms]). The parameters used for
%PWELCH function are detailed herein, however, the user can change them
%using lines 51-53. The outputs are PRE, EARLY, LATE, and F.

%DIRNAME = directory name that files are located in
%PRE = output array of PSD estimates for pre-taste period
%EARLY = output array of PSD estimates for early-taste period
%LATE = output array of PSD estimates for late-taste period
%F = output vector of Frequency for given PWELCH parameters

%get file location and information
matfile = dir([dirname filesep '*_Combined_passive.mat']);

%grab animal name for plot labeling
animal = dirname(strfind(dirname,'BS'):strfind(dirname,'BS')+3);

%load data
working_mat = load(matfile(1).name); array_set = cell2mat(fieldnames(working_mat));
session_name = fieldnames(working_mat.(array_set)); sessions = size(fieldnames(working_mat.(array_set)),1);
comb_files = working_mat.combined_data;

% saline_folder_name = uigetdir('','Choose folder where Saline trial is'); saline_file = dir([saline_folder_name filesep '*_affective_session.mat']);
% full_dir = [saline_folder_name filesep saline_file.name];
% str=whos('-file',full_dir); str={str.name}; saline = load(full_dir,str{:}); sal_data = saline.affective_states;      %grab saline data
% working_mat = load(matfile.name); comb_files = working_mat.affective_states; new_name = 'drug_sess'; [comb_files.(new_name)]=comb_files.('Session_0'); %grab affective data and change name of field
% comb_files = rmfield(comb_files,'Session_0');
% 
% %put saline data into comb_files struct
% [comb_files(:).saline_sess] = sal_data.Session_0; 

% % Construct a Question Dialog Box with 2 options for spectorgram plotting
% choice = questdlg('What type of spectrogram do you want?', ...
% % 	'Plotting Menu', ...
% % 	'Mean','Normalized', 'Maybe');
% 

% Construct a Question Dialog Box with 2 options for spectorgram plotting
trial_split = questdlg('Do you want to split this trial into smaller bins (ie. for averaging purposes)?', ...
	'Plotting Menu', ...
	'Yes','No', 'Maybe');

%Asks user to dictate how to split the array using milliseconds
switch trial_split 
    case 'Yes'
        prompt_2 = {'Large bin size (ms): ','Milliseconds to split by:'}; dlg_title_2 = 'Trial Binning:'; num_lines_2 = 2;
        defaultans_2 = {'300000','5000'}; labels_2 = inputdlg(prompt_2,dlg_title_2,num_lines_2,defaultans_2);
        trial_length = size(working_mat.(array_set).affective.drug_sess,4)/str2num(labels_2{2});
        
        %Indicates the number of trials the large 20-min section will be
        %split into and then sets the millisecs variable for later use
        if rem(trial_length,1) > 0
            trial_length = round(trial_length)+1; millisecs = str2num(labels_2{2}); big_split = str2num(labels_2{1});
        else 
            trial_length = round(trial_length); millisecs = str2num(labels_2{2}); big_split = str2num(labels_2{1});
        end
        %details choices made
        disp(['You are splitting the 20-minute section into ' num2str(trial_length) ' psuedo-trials!']);
    case 'No'    
        %details choices made
        disp(['Assumes 20 minutes (1,200,000ms) per condition']);
end

%Flip through each matlab output file and contruct merged arrays

disp(['Working on ' animal 's data']); %Displays working file
build1 = []; build2= [];

prompt_3 = {'Max Frequency (Hz): ', 'Minimum Frequency (Hz)'}; dlg_title_3 = 'PSD Parameters:'; num_lines_3 = 2;
defaultans_3 = {'20','3'}; labels_3 = inputdlg(prompt_3,dlg_title_3,num_lines_3,defaultans_3);

%Flip through sessions
for x=1:sessions(1)
    %Create array for session names
    array_set = fieldnames(comb_files);
    
     if x == 1
            file_data = 'drug_sess';
        else
            file_data = 'saline_sess';
     end
     
 
    switch trial_split 
        case 'No'
            session_name = fieldnames(comb_files.(array_set{x}));
            session_data = comb_files.(array_set{x}).(session_name{1});
            array_sizes = size(session_data);   

            taste_data = squeeze(session_data(1,:,:,:));
            trials = size(taste_data(:,:,:,:),(3));  %sets up array to be like others in rest of analysis
            channels = size(taste_data(:,:,:,:),(1)); %get number of channels for later use
    
            
            %stores data in arrays for spectral analyses 
            if x ==1;
                build1 = taste_data; 
            else
                build2 = taste_data;
            end
%         case 'Yes'
%             %stores data in arrays for spectral analyses 
%             if x ==1;
%                 build1 = cut_by_5_min; 
%             else
%                 build2 = cut_by_5_min;
%             end           
    end

end %end session loop

aff_cond1 = build1; aff_cond2 = build2; 
        
Fs = 1000;              %Sampling frequency in Hz.
sig_length = 2.^14;     %denotes signal length (16384 samples ? N samples) with (128 samples ? ?N / 128? samples = segment length)
fmin = str2num(labels_3{2}); fmax = str2num(labels_3{1});    %set cutoffs for frequencies to look at
tmin = 0;               %set time window to look at

 switch trial_split
        case 'Yes'
           [affective_struct, saline_struct, power_spec] = binning_stone(working_mat, sessions, big_split, millisecs, fmax, fmin);
           choice = ['20_min_session_' num2str(1200000/big_split) '_' num2str(big_split/60000) 'min_bin_']; %For saving purposes
     case 'No'
           [affective_struct, saline_struct, power_spec] = full_passive_stone(working_mat, sessions, fmax, fmin);
 end

%Flip through sessions
for x=1:sessions(1)
       
    %reshape the array if user wants to split the 20-min section
    switch trial_split
%         case 'Yes'
%            
%             
%                 %place all plotting things here
%                 suptitle_name = (['First ' num2str(bin*5) ' minutes']);
%                 hold on;  xticklabels([1:5]); ylim([fmin fmax]); xlim([0.25 4.75]);
%                 suptitle([animal ' - ' suptitle_name]);
%                 bin_start = bin*channels;
%             end
                       
        case 'No'
            
            choice = '20_min_session_'; %For saving purposes
            sess_cond = {['aff_cond' num2str(x)]};           
            array = eval(sess_cond{1});
            channels = size(array,1)/divider;

            s_window = 5000;         %assigns window criteria to divide the signal (length you input) into segments of this size
            s_overlap = 4500;        %multiplied by a hamming window with 90% overlap (90% of s_window means ~ 14776 points are considered (0.9 x 16384). This is the number of common points used in two consecutive FFT. It is used to smooth the spectrogram.)
            MeanP=zeros(8193,2391);     %Create array for mean power (column length dictated by window/overlap);
            meanfact=size(array,1);     %Assumes 1 LARGE trial so no multiplying
            
             %flip through trials and perform spectrogram
            for trial = 1:size(array,1);

                [S, F, T, P] = spectrogram(detrend(array(trial,:)), s_window, s_overlap, sig_length, Fs);

                good = find(F < fmax);
                MeanP=MeanP+P/meanfact;                  %divides total power by number of total trials*channels

                good = find(F < fmax);
                good = intersect(good,find(F > fmin));
                Tgood = find(T > tmin);

            end
            power_spec = subplot(2,1,x); hold on; imagesc(T(Tgood)-1,F(good),(MeanP(good,Tgood)/10^6));  axis xy; colorbar; 

    end
end

switch trial_split
    case 'Yes' 
        %Get number of figures open in order to flip through and format
        fig_find =  findobj('type','figure'); fig_count = length(fig_find);

        for fig=1:fig_count
            for sub=1:sessions
                figure(fig); subplot(2,1,sub); ylim([fmin fmax]); ylabel('Freq [Hz]'); hold on; 
                h = colorbar; ylabel(h,'Power Spectral Density (mV^{2}/Hz)'); colormap('jet');
                secs = millisecs/1000; xlim([0.25 secs-0.25]); xlabel('Time [sec]');
                if sub == 1;
                    title('Affective State = LiCl');
                    cscale1 = max(caxis);
                else
                    title('Affective State = Healthy');
                    cscale2 = max(caxis);
                end
            end

            %Set printer/saving parameters and save file
            h=gcf; set(h, 'PaperPositionMode', 'manual'); set(h, 'PaperUnits', 'inches');
            set(h, 'PaperPosition', [1 1 8 7]); set(h,'PaperOrientation','landscape');
            default_save_dir = {'/home/bradly/drive2/data/Affective_State_Protocol/LiCl/Combined_Passive_Data',filesep, animal};
            full_location = join([default_save_dir{1},default_save_dir{2},default_save_dir{3}]);

            switch trial_split
                case 'Yes'
                    name = [animal '_Mean_spec_' choice num2str(fig) '_of_' num2str(fig_count) '.pdf']; 

                case  'No'
                    name = [animal '_spectral_analysis_0ms_1200000ms.pdf']
            end

            save_spot = fullfile(full_location, name); 
            print(h, save_spot,'-dpdf', '-r0');

        end

    case 'No'
        for sub=1:sessions
            figure(1); subplot(2,1,sub); ylim([fmin fmax]); ylabel('Freq [Hz]'); hold on; 
            h = colorbar; ylabel(h,'Power Spectral Density (mV^{2}/Hz)'); colormap('jet');
            xticks([0:60:1200]); xticklabels([0:1:20]); xlim([0 1200]);xlabel('Time [min]');  
            suptitle([animal ' ' 0 'min-' 20 'min']); 
            if sub == 1;
                    title('Affective State = LiCl');
                    cscale1 = max(caxis);
            else
                title('Affective State = Healthy');
                cscale2 = max(caxis);
            end
        end
        
        %Set printer/saving parameters and save file
        h=gcf; set(h, 'PaperPositionMode', 'manual'); set(h, 'PaperUnits', 'inches');
        set(h, 'PaperPosition', [1 1 8 7]); set(h,'PaperOrientation','landscape');
        default_save_dir = {'/home/bradly/drive2/data/Affective_State_Protocol/LiCl/Combined_Passive_Data',filesep, animal};
        full_location = join([default_save_dir{1},default_save_dir{2},default_save_dir{3}]);
        save_spot = fullfile(full_location, name); print(h, save_spot,'-dpdf', '-r0');
end

            

    